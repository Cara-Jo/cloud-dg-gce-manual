
=== Deploy A Cluster

==== Prerequisites

Obtain a GCE account:: Follow https://cloud.google.com/compute/docs/signup[Google's instructions] to get set up with an account and to activate cloud access. Note that Google offers a https://console.developers.google.com/freetrial[free trial] for new users.

Get the tools:: The scripts in this document rely on the https://cloud.google.com/compute/docs/gcloud-compute/[gcloud] command line tool.

.Install gcloud on Mac or Linux
[source,bash]
----
curl https://sdk.cloud.google.com | bash
gcloud components update
----

To install gcloud on windows, follow https://cloud.google.com/compute/docs/gcloud-compute/#install[these instructions].

Detailed instructions for using gcloud to interact with GCE compute resources can be found here: https://cloud.google.com/compute/docs/gcloud-compute/

Create an authentication token:: GCE uses OAuth tokens to manage resource authentication. Logging in is generally as simple as running `gcloud auth login` but if problems are encountered, follow https://cloud.google.com/compute/docs/gcloud-compute/#auth [these more detailed instructions] to establish the authentication tokens.


Log in to the console:: Despite the fact that the commands in this guide use the command line interface, the Google cloud console is still a very useful resource to use while running a cluster. Many of the administrative actions that can be performed in the console will also provide the equivalent command line invocation, which can be a very useful way to learn the gcloud tool. Log in to your console at: https://console.developers.google.com/

Create a project (optional):: Use the console to create a project for the DataStax Enterprise deployment. Click the create project button and assign a useful name, this guide will use the name "myproject". The project-id field has to be globally unique, so it is convenient to use the suggestion provided by the tool, but it is possible to specify it manually.

image::createproject.png[]

After creating the project, set it as the default project that gcloud will use for all commands.

.Set the default project
[source,bash]
----
gcloud config set project myproject
----

==== Create a customized OS image

It is useful to customize one of the available Google Linux images to run DSE, this will eliminate manual configuration tasks required when deploying multi-node clusters. This guide will start with the backports-debian-7-wheezy-v20141021 image and will use an n1-highmem-4 instance type.

.Create the instance and connect
[source,bash]
----
gcloud compute instances create customizer --zone us-central1-b --machine-type=n1-highmem-4 --image debian-7-backports
gcloud compute ssh customizer
----

Now, copy the following script to the node. It is probably easiest to just copy the script and paste it into a new file. It may be necessary to slightly customize this for individual deployments, but this should provide a good starting point. In particular, when new versions of the base OS images come out, the rc.local file can change, and the customizations made to that file may need some tweaking.

This script installs some useful packages, including Oracle's Java distribution, and sets up some IO optimizations.

.Wheezy customizations for DSE
[source,bash]
----
include::../../../src/scripts/mod_wheezy-7.sh[]
----

Once any desired customizations have been made, execute the script:

[source,bash]
----
#Assuming the script was named customize.sh
chmod +x customize.sh
sudo ./customize.sh
----

When the script finishes executing, open a new terminal window, re-authenticate with gcloud, and then create and attach a temporary disk as follows:

[source,bash]
----
gcloud compute disks create temporary-disk --zone us-central1-b
gcloud compute instances attach-disk customizer --disk temporary-disk --device-name temporary-disk --zone us-central1-b
----

Then, back in the terminal connected to the GCE instance, mount the new temporary disk, create the image of the boot disk and upload it to a storage bucket.

NOTE: If the instance was created with additional disks, the temporary disk might not be /dev/sdb. Use `ls -l /dev/disk/by-id/google-*` to find the temporary-disk volume.

[source,bash]
----
sudo mkdir /mnt/tmp
sudo /usr/share/google/safe_format_and_mount -m "mkfs.ext4 -F" /dev/sdb /mnt/tmp
sudo gcimagebundle -d /dev/sda -o /mnt/tmp/ --log_file=/tmp/bundle.log
#Rename the auto-generated hex filename to something useful
mv /mnt/tmp/<hex-numbered-file> DSE-prepped-backports-debian-7-wheezy.image.tar.gz

#Log in with your personal credentials to use gsutil
gcloud auth login
gsutil mb gs://my-images
gsutil cp /mnt/tmp/DSE-prepped-backports-debian-7-wheezy.image.tar.gz gs://my-images
----

NOTE: It is worthwhile to read up on the naming rules for storage buckets and objects: https://cloud.google.com/storage/docs/bucketnaming

Once the image is transferred, exit from the GCE customizer instance, it can now be deleted: `gcloud compute instances delete --zone us-central1-b customizer`

==== Start customized instances

Prior to starting instances based on the new customized boot volume, it has to be converted to a bootable image. These steps perform the conversion and then create an instance based on the customized image. Connect to the new instance and ensure that the customizations have taken effect. In particular, check for the existence of Oracle Java 7 by running `java -version` and that the attached disk is correctly mounted at /var/lib/cassandra with `df -h`.

.Create the image and test instance
[source,bash]
----
gcloud compute images create dse-debian-7-backports --source-uri gs://my-images/DSE-prepped-backports-debian-7-wheezy.image.tar.gz
gcloud compute disks create testdisk  --zone us-central1-b --size 100GB --type pd-ssd
gcloud compute instances create testcustom --zone us-central1-b --machine-type=n1-highmem-4 --image dse-debian-7-backports --disk name=testdisk device-name=ssd
gcloud compute ssh --zone us-central1-b testcustom
----

Delete the instance once it's been established that it's configured correctly.

To start multiple DSE-ready instances, customize & execute the following script. Before attempting to start a large cluster, double check the available quota for resources like disk & CPUs. It may be necessary to request quota increases.

.Start multiple instances
[source,bash]
----
include::../../../src/scripts/start_instances.sh[]
----
